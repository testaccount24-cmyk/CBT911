1.
/* REXX PROB001*/
 Say 1 + 1
  Say "Today is" Date()
  Name = "Sue"
  Say "Hello, " Name
2.
/* REXX PROB002*/
Say "hello"
Say 1 + 1
Say length("hello")
num = 5

say num + 5

3.
Quotes around a valid number don t stop REXX from doing math.
Quotes around a variable prevent REXX from seeing the variable s contents.

4.
An undefined variable (or one that was DROPped) can t be used in math.

5.
/* REXX PROB005*/
greeting = "Good morning"
name = "Joe"
say greeting name
say greeting || name
/*or*/
say greeting""name
say greeting "          "name

6.
It uses the TSO command SEND to send a message to another TSO user.
The variables message and userid must be out of quotes.

7.
/* REXX PROB007*/
"LISTDS 'userid.REXX.EXEC' MEMBERS"

8.
/* REXX PROB008*/
members = ""
"LISTDS 'userid.REXX.EXEC' " MEMBERS

9.
This program displays THE ANSWER IS 10

 10.
/* REXX PROB010*/
/* This is a sample exec for REXX class */
"TIME"
"SEND 'SAMPLE EXEC ' USER(*)"

11.
Displays GREETING

12.
Displays HELLO

13.
Displays HAPPY HALLOWEEN
         GREETING

14.
Displays 234

15.
/* REXX PROB015*/
say "3 + 1 is 4"
say "'3 + 1 is 4'"
say "O'brien"

16.
/* REXX PROB016*/
"LISTCAT ENTRY('SYS1.PROCLIB')"

17.
Displays MESSAGE

18.
/* REXX PROB018*/
v1 = 10
v2 = 20
say v1 + v2

19.
/* REXX PROB019*/
userid = "TSOU02" /*for example*/
"LISTCAT LEVEL("userid")"


 20.
They will be found equal, because a number with more than 9 digits is rounded.

21.
Displays 0
0 means the comparison is false.

22.
displays 0
the comparison of "2 + 2" and "2" is false.

23 - 27.
Just do it.

28.
/* REXX PROB028*/
previous = ""
do 10
  say "please enter a number (not same as previous)"
  pull number
  if number = previous then say "that is same as previous"
  previous = number
End

29.
/* REXX PROB029*/
secret = 13
do 10
  say "PLEASE ENTER YOUR GUESS, FROM 1 TO 20"
  pull number
  if number = secret then do
     say "RIGHT"
     leave
     end
  else do
     say "WRONG"
     end
end


 30.
/* REXX PROB030*/
do 10
  say "PLEASE ENTER A DATASET NAME"
  pull dsn
  /* Standard TSO naming conventions:
     if name is fully qualified,
     specify with apostrophes:
     'MYUSERID.MY.DATA'
     if userid omitted, and it's yours,
     do not include apostrophes:
      MY.DATA
   */
  "LISTDS" dsn
  if rc = 0 then do
     leave
     end
  else do
     say "not found"
     end
end

-------------
31.
/* REXX PROB031*/
Say "Please enter name"
Pull name
select
 when name = "JOHN" then say "PAUL JONES"
 when name = "GEORGE" then say "Washington"
 when name = "NELSON" then say "Mandela"
 when name = "JULIUS" then say "Caesar"
 when name = "" then say "Please try again"
otherwise
say "bad reply .> Please enter a name"
end

32.
/* REXX PROB032*/
Say "Please reply Yes! "
parse pull reply
if reply = "Yes" then say "correct answer"
else say "wrong answer"

33.
/* REXX PROB033*/
VAR1 = "ABCDEFGHIJKLMNOP"
Parse var VAR1  3 var2  5  6  var3  10  9  var4  15
say var2
say var3
say var4

 34.
Displays SUE KAREN MARYELLEN

35.
/* REXX PROB035*/
arg dataset
  /* Standard TSO naming conventions:
     if name is fully qualified,
     specify with apostrophes:
     'MYUSERID.MY.DATA'
     if userid omitted, and it's yours,
     do not include apostrophes:
      MY.DATA
   */
"LISTCAT ENTRY("dataset")"

36.
Syntax error.

37.
/* REXX PROB037*/
arg v1 v2 v3 v4
if v4 <> "" then say "I said enter only three items please!"
say v3 v2 v1

38.
/* REXX PROB038*/
Say "Please type in three words (only)"
Pull word1 word2 word3 .
/* the period throws away words after the third*/

39.
/* REXX PROB039*/
Say "Please type in three words (only)"
Pull word1 word2 word3 .
/* the period throws away words after the third*/
Say word3 word2 word1

40.
/* REXX PROB040*/
arg dataset
  /* Standard TSO naming conventions:
     if name is fully qualified,
     specify with apostrophes:
     'MYUSERID.MY.DATA'
     if userid omitted, and it's yours,
     do not include apostrophes:
      MY.DATA
   */
if dataset = "JUNK.DATA" then "DELETE JUNK.DATA"
else do
   Say "ARE YOU SURE? Y/N"
   pull reply
   if reply = "Y" then do
      "DELETE " dataset
      say "DELETED"
      end
    else do
      say "NOT DELETED"
      end
    end

41.
/* REXX PROB041*/
Say "Please type in old salary"
Pull old
Say "Please type in new salary"
Pull new
increase =  100 * ((new - old) / old)
Say "the % of increase was" increase

 42.
/* REXX PROB042*/
say "PLEASE ENTER DATASET NAME"
pull dsn
  /* Standard TSO naming conventions:
     if name is fully qualified,
     specify with apostrophes:
     'MYUSERID.MY.DATA'
     if userid omitted, and it's yours,
     do not include apostrophes:
      MY.DATA
   */

signal on error
"LISTDS" dsn
Exit

error:
say "CANNOT EXECUTE TSO COMMAND"
say "TSO ERROR CODE IS " rc
say "LINE IN ERROR IS " sourceline(sigl)
say "PLEASE REENTER"
pull dsn
"LISTDS" dsn
exit

43.
/* REXX PROB043*/
say "Please type in a number"
pull number1
say "Please type in another number"
pull number2

signal on syntax
say number1 * number2
exit

syntax:
say "a syntax error has occured. "
exit

44.
displays
9
7
7

45.
/* REXX PROB044*/
Say "PLEASE ENTER RECORD LENGTH"
pull lrecl
say "PLEASE ENTER BLOCK SIZE"
pull blksize

if (blksize // lrecl) = 0 then say "OK"
else say "BLOCK SIZE IS NOT A MULTIPLE OF RECORD LENGTH"

 46.
/* REXX PROB046*/
say "Please enter principal"
pull principal
say "please enter yearly interest rate in percent"
pull percent
say "how many years is money kept in account?"
pull years
say "please enter how many times per year interest is compounded"
say "1 = yearly; 12 = monthly; 52 = weekly; 365 = daily"
pull frequency

yearly_rate = percent / 100
r = yearly_rate / frequency

n = years * frequency

final = principal * ((1 + r)**n)
say final


47.
Just do it.

48.
/* REXX PROB048*/
arg number1 number2
if datatype(number1) = "CHAR" then do
   say number1 "is not a valid number"
   exit
   end

if datatype(number2) = "CHAR" then do
   say number2 "is not a valid number"
   exit
   end

answer = number1 - number2
answer = abs(answer)
say answer

49.
/* REXX PROB049*/
if sysdsn(WORKSHOP.TEMP) = "OK" then do
   delete "WORKSHOP.TEMP"
   end
else do
   "ALLOC DSN(WORKSHOP.TEMP) LIKE(REXXPRGS.EXEC)"
  end

 50.
/* REXX PROB050*/
if sysdsn(WORKSHOP.TEMP) = "OK" then do
   call outtrap "line.", "*" /* or x = outtrap("line.","*") */
   delete "WORKSHOP.TEMP"
   end
else do
   "ALLOC DSN(WORKSHOP.TEMP) LIKE(REXXPRGS.EXEC)"
   end

51.
/* REXX PROB051*/
if sysdsn(WORKSHOP.TEMP) = "OK" then do
   call msg "OFF"
   delete "WORKSHOP.TEMP"
   end
else do
   "ALLOC DSN(WORKSHOP.TEMP) LIKE(REXXPRGS.EXEC)"
   end

52.
/* REXX PROB052*/
say "Please type in GREAT"
pull word
say translate(word,"BUENO","GREAT")
   /* or */
say translate(word,"ONEUB","TAERG")

53.
/* REXX PROB053*/
arg hex1 sign hex2
dec1 = x2d(hex1)
dec2 = x2d(hex2)

if sign = "+" then do
   dec_answer = dec1 + dec2
   end

if sign = "-" then do
   dec_answer = dec1 - dec2
   end

say d2x(dec_answer)

54.
/* REXX PROB054*/
/*REXX Uppr EXEC converts upper to lower*/
parse arg instring
upper_alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
lower_alpha = "abcdefghijklmnopqrstuvwxyz"
outstring = translate(instring,upper_alpha,lower_alpha)
say outstring

 55.
Just do it.

56.
/* REXX PROB056*/
Say concat_nate("cat" "dog")
exit

concat_nate:
arg var1 var2
return var1 || var2
/* or return var1""var2 */

57.
/* REXX PROB057*/
call concat_nate "cat" "dog"
say result
exit

concat_nate:
arg var1 var2
return var1 || var2
/* or return var1""var2 */

58.
/* REXX PROB058*/
/*REXX main program to execute PERCENTI*/
say percenti(100000, 150000)


/*REXX external function PERCENTI */
/* this must be a member, named PERCENTI
in your REXX library, or in another
library allocated to SYSEXEC
*/
arg old, new
if datatype(old) = "CHAR" then do
   say "invalid number" old
   return 0
   end

if datatype(new) = "CHAR" then do
   say "invalid number" new
   return 0
   end

increase =  100 * ((new - old) / old)
return increase

 59.
/* REXX PROB059*/
/*REXX main program*/
call concatn "cat" "dog"
say result
exit


/*REXX CONCATN external function*/
/* this must be a member, named CONCATN
in your REXX library, or in another
library allocated to SYSEXEC
*/
arg var1 var2
return var1 || var2
/* or return var1""var2 */

60.
/* REXX PROB060*/
/*REXX main program*/
say METRIC("KILOMETER" 1000)

/*REXX external function METRIC*/
/* this must be a member, named METRIC
in your REXX library, or in another
library allocated to SYSEXEC
*/
arg unit quantity

if unit = "LITER" then do
   return quantity * 1.057 "quarts"
   end

if unit = "QUART" then do
   return quantity * .946 "liters"
   end

if unit = "MILE" then do
   return quantity * (8/5) "kilometers"
   end

if unit = "KILOMETER" then do
   return quantity * .625 "miles"
   end

 61.
/* REXX PROB061*/
/*REXX main program*/
call SQRT 25
say result

/*REXX SQRT external function or subroutine*/
/* this must be a member, named SQRT
in your REXX library, or in another
library allocated to SYSEXEC
*/
arg number
if number < 0 then do
   say "number must be positive"
   return 0
   end

if datatype(number) = "CHAR" then do
   say "number must be numeric"
   return 0
   end

guess = number / 2
do 50
  new_guess = (guess + (number / guess)) / 2
  guess = new_guess
end
return new_guess


62.
/* REXX PROB062*/
do i = 1 to 10
  number.i = i + 100
end i

do i = 1 to 11
  say number.i
end i

63.
/* REXX PROB063*/
say "please enter a command"
pull command

call outtrap "Display_line.", "*"
command
call outtrap "OFF"

say "About to display command's output"
do i = 1 to Display_line.0
  say Display_line.i
end i

 64.
/* REXX PROB064*/
sample_file = "my.sample.file"
"ALLOC DDN(INFILE) SHR REUSE DSN("sample_file")"
"EXECIO * DISKR INFILE (STEM INFILE. FINIS)"
"FREE DDN(INFILE)"
Do i = 1 to infile.0 by 2
  say infile.i
end i

65.
/* REXX PROB065*/
sample_file   = "my.sample.file"
sample_output = "my.sample.output"

"ALLOC DDN(INFILE) SHR REUSE DSN("sample_file")"
"EXECIO * DISKR INFILE (STEM INFILE. FINIS)"
"FREE DDN(INFILE)"

"ALLOC DDN(OUTFILE) NEW REUSE DSN("sample_output")",
  "LIKE("sample_file")"

"EXECIO " infile.0 "DISKW OUTFILE (STEM INFILE. FINIS)"
"FREE DDN(OUTFILE)"

66.
/* REXX PROB066*/
sample_file = "my.sample.file"
"ALLOC DDN(INFILE) SHR REUSE DSN("sample_file")"
"EXECIO * DISKR INFILE (STEM INFILE. FINIS)"
"FREE DDN(INFILE)"

record_count = 0
max_length = 0

Do i = 1 to infile.0
  record_count = record_count + 1
  say infile.i

  if length(infile.i) > max_length
  then max_length = length(infile.i)

end i

Say "record count was " record_count
/* or infile.0 instead of record_count */
Say "length of longest record was " max_length

 67.
/* REXX PROB067*/
say "please enter a command"
pull command

call outtrap "Display_line.", "*"
command
call outtrap "OFF"

if sysdsn("temp.capture.data") = "OK"
then "DELETE TEMP.CAPTURE.DATA"

"ALLOC DDN(CAPTURE) DSN(TEMP.CAPTURE.DATA) NEW REUSE",
  "SPACE(1 1) TRACKS LRECL(80) BLKSIZE(4000) RECFM(F B)"

"EXECIO " Display_line.0 "DISKW CAPTURE (STEM Display_line. FINIS)"
"FREE DDN(CAPTURE)"

68.
/* REXX PROB068*/
arg expression
interpret "say" expression

/* REXX PROB069*/
/*Extra practice problem.*/
do until reply = "NO"
  say "Please enter principal"
  pull principal
  if principal = "" then leave
  if datatype(principal) = "CHAR" then iterate

  say "please enter yearly interest rate in percent"
  pull percent
  if percent = "" then iterate
  if datatype(principal) = "CHAR" then iterate

  say "how many years is money kept in account?"
  pull years
  if years = "" then iterate
  if years > 100 then iterate
  if datatype(principal) = "CHAR" then iterate

  say "please enter how many times per year interest is compounded"
  say "1 = yearly; 12 = monthly; 52 = weekly; 365 = daily"
  pull frequency

  yearly_rate = percent / 100
  r = yearly_rate / frequency

  n = years * frequency

  final = principal * ((1 + r)**n)
  say final

  say "do another calculation? YES/NO"
  pull reply
end
